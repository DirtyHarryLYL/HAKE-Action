name: "VGG_ILSVRC_16_layers"
layer {
  name: 'data'
  type: 'Python'
  top: 'data'
  top: 'human_roi'
  top: 'obj1_roi'
  top: 'obj2_roi'
  top: 'obj3_roi'
  top: 'obj4_roi'
  top: 'rel1_roi'
  top: 'rel2_roi'
  top: 'rel3_roi'
  top: 'rel4_roi'
  top: 'scene_roi'
  top: 'label'
  top: 'part_roi' #N = M people * K parts 
  top: 'label_wts'
  top: 'human_prior'
  top: 'hp_list'
  top: 'hp_list_wts'
  ######################## pvp and wts
  top: 'pvp_ankle2'
  top: 'pvp_ankle2_wts'
  top: 'pvp_knee2'
  top: 'pvp_knee2_wts'
  top: 'pvp_hip'
  top: 'pvp_hip_wts'
  top: 'pvp_hand2'
  top: 'pvp_hand2_wts'
  top: 'pvp_shoulder2'
  top: 'pvp_shoulder2_wts'
  top: 'pvp_head'
  top: 'pvp_head_wts'
  top: 'pvp_wts'
  ########################117 verb and 80 object
  top: 'verb_list'
  top: 'verb_list_wts'
  top: 'object_list'
  top: 'object_list_wts'
  python_param {
    module: 'HOI_data_layer-PaSta-Linear_large'
    layer: 'HOIDataLayer'
    param_str: '{"batch_size":1,"max_size":640, "root":"./data/hico/","list_file":"./data/hico/train_filelist_large.txt"}'
  }
  include {
    phase: TRAIN
  }
}


layer {
  name: 'data'
  type: 'Python'
  top: 'data'
  top: 'human_roi'
  top: 'obj1_roi'
  top: 'obj2_roi'
  top: 'obj3_roi'
  top: 'obj4_roi'
  top: 'rel1_roi'
  top: 'rel2_roi'
  top: 'rel3_roi'
  top: 'rel4_roi'
  top: 'scene_roi'
  top: 'label'
  top: 'part_roi'#N = M people * K parts 
  top: 'label_wts'
  top: 'human_prior'
  top: 'hp_list'
  top: 'hp_list_wts'
  ######################## pvp and wts
  top: 'pvp_ankle2'
  top: 'pvp_ankle2_wts'
  top: 'pvp_knee2'
  top: 'pvp_knee2_wts'
  top: 'pvp_hip'
  top: 'pvp_hip_wts'
  top: 'pvp_hand2'
  top: 'pvp_hand2_wts'
  top: 'pvp_shoulder2'
  top: 'pvp_shoulder2_wts'
  top: 'pvp_head'
  top: 'pvp_head_wts'
  top: 'pvp_wts'
  ########################117 verb and 80 object
  top: 'verb_list'
  top: 'verb_list_wts'
  top: 'object_list'
  top: 'object_list_wts'
  python_param {
    module: 'HOI_data_layer-PaSta-Linear_large'
    layer: 'HOIDataLayer'
    param_str: '{"batch_size":1,"max_size":640,"root":"./data/hico/","list_file":"./data/hico/test_filelist.txt"}'
  }
  include {
    phase: TEST
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0   
    decay_mult: 0
  }
  param {
    lr_mult: 0   
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0   
    decay_mult: 0
  }
  param {
    lr_mult: 0   
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0   
    decay_mult: 0
  }
  param {
    lr_mult: 0   
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0   
    decay_mult: 0
  }
  param {
    lr_mult: 0   
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}



# Four reduction layers: dim_red_11 - dim_red_44

layer {
  name: "dim_red_11"
  type: "Convolution"
  bottom: "conv5_3"
  top: "dim_red_11"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 45
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "dim_red_22"
  type: "Convolution"
  bottom: "conv5_3"
  top: "dim_red_22"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 166
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "dim_red_33"
  type: "Convolution"
  bottom: "conv5_3"
  top: "dim_red_33"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 166
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  name: "dim_red_55"
  type: "Convolution"
  bottom: "conv5_3"
  top: "dim_red_55"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 45
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

# Layers based on dim_red_11
layer {
  name: "relroi1_pool5"
  type: "ROIPooling"
  bottom: "dim_red_11"
  bottom: "rel1_roi"
  top: "relroi1_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "relroi2_pool5"
  type: "ROIPooling"
  bottom: "dim_red_11"
  bottom: "rel2_roi"
  top: "relroi2_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "relroi3_pool5"
  type: "ROIPooling"
  bottom: "dim_red_11"
  bottom: "rel3_roi"
  top: "relroi3_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "relroi4_pool5"
  type: "ROIPooling"
  bottom: "dim_red_11"
  bottom: "rel4_roi"
  top: "relroi4_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}

layer {
  name: "humanroi_pool5"
  type: "ROIPooling"
  bottom: "dim_red_22"
  bottom: "human_roi"
  top: "humanroi_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "obj1_roi_s"
  type: "Silence"
  bottom: "obj1_roi"
}
layer {
  name: "obj2_roi_s"
  type: "Silence"
  bottom: "obj2_roi"
}
layer {
  name: "obj3_roi_s"
  type: "Silence"
  bottom: "obj3_roi"
}
layer {
  name: "obj4_roi_s"
  type: "Silence"
  bottom: "obj4_roi"
}
layer {
    name: "object_list_s"
    type: "Silence"
    bottom: "object_list"
}
layer{
    name: "object_list_wts_s"
    type: "Silence"
    bottom: "object_list_wts"
}
layer {
    name: "verb_list_s"
    type: "Silence"
    bottom: "verb_list"
}
layer{
    name: "verb_list_wts_s"
    type: "Silence"
    bottom: "verb_list_wts"
}
layer {
  name: "sceneroi_pool5"
  type: "ROIPooling"
  bottom: "dim_red_33"
  bottom: "scene_roi"
  top: "sceneroi_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}

layer {
  name: "slicer_roi"
  type: "Slice"
  bottom: "part_roi"
  top: 'part_roi1'#RAnk
  top: 'part_roi2'#RKne
  top: 'part_roi3'#LKne
  top: 'part_roi4'#LAnk
  top: 'part_roi5'#Pelv
  top: 'part_roi6'#Neck
  top: 'part_roi7'#RWri
  top: 'part_roi8'#RElb
  top: 'part_roi9'#LElb
  top: 'part_roi10'#LWri
  slice_param {
    axis: 0
  }
}

#####################################part pooling
layer {
  name: "partroi1_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi1"
  top: "partroi1_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi2_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi2"
  top: "partroi2_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi3_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi3"
  top: "partroi3_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi4_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi4"
  top: "partroi4_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi5_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi5"
  top: "partroi5_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi6_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi6"
  top: "partroi6_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi1_pool7"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi7"
  top: "partroi7_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi8_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi8"
  top: "partroi8_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi9_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi9"
  top: "partroi9_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "partroi10_pool5"
  type: "ROIPooling"
  bottom: "dim_red_55"
  bottom: "part_roi10"
  top: "partroi10_pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}

layer {
  name: "human_prior"
  type: "Silence"
  bottom: "human_prior"
}
############################# 6 pvp classifier
###feet#################################################
layer {
  name: "feat_concat_feet"
  type: "Concat"
  bottom: "partroi1_pool5"
  bottom: "partroi4_pool5"
  bottom: "humanroi_pool5"
  bottom: "relroi1_pool5"
  bottom: "relroi2_pool5"
  bottom: "relroi3_pool5"
  bottom: "relroi4_pool5"
  bottom: "sceneroi_pool5"
  top: "feet_part_concat"
  concat_param {
    axis: 1
  }
}
layer {
  name: "fc6_feet"
  type: "InnerProduct"
  bottom: "feet_part_concat"
  top: "fc6_feet"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_feet"
  type: "ReLU"
  bottom: "fc6_feet"
  top: "fc6_feet"
}
layer {
  name: "drop6_feet"
  type: "Dropout"
  bottom: "fc6_feet"
  top: "fc6_feet"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_feet"
  type: "InnerProduct"
  bottom: "fc6_feet"
  top: "fc7_feet"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu7_feet"
  type: "ReLU"
  bottom: "fc7_feet"
  top: "fc7_feet"
}
layer {
  name: "drop7_feet"
  type: "Dropout"
  bottom: "fc7_feet"
  top: "fc7_feet"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_feet"
  type: "InnerProduct"
  bottom: "fc7_feet"
  top: "cls_score_feet"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_feet"
  type: "MIL"
  bottom: "cls_score_feet"
  top: "mil_cls_score_feet"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_feet"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_feet"
  bottom: "pvp_ankle2"
  bottom: "pvp_ankle2_wts"
  top: "loss_feet"
  loss_weight: 12.2
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_feet"
        top: "predict_feet"
        name: "predict_feet"
        type: "Sigmoid"
}
layer {
  name: "accuracy_feet"
  type: "MultiLabelAccuracy"
  bottom: "predict_feet"
  bottom: "pvp_ankle2"
  top: "accuracy_feet"
}
####feet-->600####################now we use MLP with one hidden layer(1024)
layer {
  name: "fc6_feet_to_600"
  type: "InnerProduct"
  bottom: "fc7_feet" # now we use the fc7 of pvp, we can try cls_score either
  top: "fc6_feet_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024 #4096
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_fc6_feet_to_600"
  type: "ReLU"
  bottom: "fc6_feet_to_600"
  top: "fc6_feet_to_600"
}
layer {
  name: "drop6_feet_to_600"
  type: "Dropout"
  bottom: "fc6_feet_to_600"
  top: "fc6_feet_to_600"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_feet_to_600"
  type: "InnerProduct"
  bottom: "fc6_feet_to_600"
  top: "cls_score_feet_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 600
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_feet_to_600"
  type: "MIL"
  bottom: "cls_score_feet_to_600"
  top: "mil_cls_score_feet_to_600"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_feet_to_600"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_feet_to_600"
  bottom: "label"
  bottom: "label_wts"
  top: "loss_feet_to_600"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_feet_to_600"
        top: "predict_feet_to_600"
        name: "predict_feet_to_600"
        type: "Sigmoid"
}
layer {
  name: "accuracy_feet_to_600"
  type: "MultiLabelAccuracy"
  bottom: "predict_feet_to_600"
  bottom: "label"
  top: "accuracy_feet_to_600"
}
#################
## knee########################################################
layer {
  name: "feat_concat_knee"
  type: "Concat"
  bottom: "partroi2_pool5"
  bottom: "partroi3_pool5"
  bottom: "humanroi_pool5"
  bottom: "relroi1_pool5"
  bottom: "relroi2_pool5"
  bottom: "relroi3_pool5"
  bottom: "relroi4_pool5"
  bottom: "sceneroi_pool5"
  top: "knee_part_concat"
  concat_param {
    axis: 1
  }
}
layer {
  name: "fc6_knee"
  type: "InnerProduct"
  bottom: "knee_part_concat"
  top: "fc6_knee"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_knee"
  type: "ReLU"
  bottom: "fc6_knee"
  top: "fc6_knee"
}
layer {
  name: "drop6_knee"
  type: "Dropout"
  bottom: "fc6_knee"
  top: "fc6_knee"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_knee"
  type: "InnerProduct"
  bottom: "fc6_knee"
  top: "fc7_knee"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu7_knee"
  type: "ReLU"
  bottom: "fc7_knee"
  top: "fc7_knee"
}
layer {
  name: "drop7_knee"
  type: "Dropout"
  bottom: "fc7_knee"
  top: "fc7_knee"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_knee"
  type: "InnerProduct"
  bottom: "fc7_knee"
  top: "cls_score_knee"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_knee"
  type: "MIL"
  bottom: "cls_score_knee"
  top: "mil_cls_score_knee"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_knee"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_knee"
  bottom: "pvp_knee2"
  bottom: "pvp_knee2_wts"
  top: "loss_knee"
  loss_weight: 16.7
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_knee"
        top: "predict_knee"
        name: "predict_knee"
        type: "Sigmoid"
}
layer {
  name: "accuracy_knee"
  type: "MultiLabelAccuracy"
  bottom: "predict_knee"
  bottom: "pvp_knee2"
  top: "accuracy_knee"
}
####knee-->600####################now we use MLP with one hidden layer(1024)
layer {
  name: "fc6_knee_to_600"
  type: "InnerProduct"
  bottom: "fc7_knee" # now we use the fc7 of pvp, we can try cls_score either
  top: "fc6_knee_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024 #4096
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_fc6_knee_to_600"
  type: "ReLU"
  bottom: "fc6_knee_to_600"
  top: "fc6_knee_to_600"
}
layer {
  name: "drop6_knee_to_600"
  type: "Dropout"
  bottom: "fc6_knee_to_600"
  top: "fc6_knee_to_600"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_knee_to_600"
  type: "InnerProduct"
  bottom: "fc6_knee_to_600"
  top: "cls_score_knee_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 600
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_knee_to_600"
  type: "MIL"
  bottom: "cls_score_knee_to_600"
  top: "mil_cls_score_knee_to_600"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_knee_to_600"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_knee_to_600"
  bottom: "label"
  bottom: "label_wts"
  top: "loss_knee_to_600"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_knee_to_600"
        top: "predict_knee_to_600"
        name: "predict_knee_to_600"
        type: "Sigmoid"
}
layer {
  name: "accuracy_knee_to_600"
  type: "MultiLabelAccuracy"
  bottom: "predict_knee_to_600"
  bottom: "label"
  top: "accuracy_knee_to_600"
}
#################
## hip######################################################
layer {
  name: "feat_concat_hip"
  type: "Concat"
  bottom: "partroi5_pool5"
  bottom: "humanroi_pool5"
  bottom: "relroi1_pool5"
  bottom: "relroi2_pool5"
  bottom: "relroi3_pool5"
  bottom: "relroi4_pool5"
  bottom: "sceneroi_pool5"
  top: "hip_part_concat"
  concat_param {
    axis: 1
  }
}
layer {
  name: "fc6_hip"
  type: "InnerProduct"
  bottom: "hip_part_concat"
  top: "fc6_hip"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_hip"
  type: "ReLU"
  bottom: "fc6_hip"
  top: "fc6_hip"
}
layer {
  name: "drop6_hip"
  type: "Dropout"
  bottom: "fc6_hip"
  top: "fc6_hip"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_hip"
  type: "InnerProduct"
  bottom: "fc6_hip"
  top: "fc7_hip"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu7_hip"
  type: "ReLU"
  bottom: "fc7_hip"
  top: "fc7_hip"
}
layer {
  name: "drop7_hip"
  type: "Dropout"
  bottom: "fc7_hip"
  top: "fc7_hip"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "cls_score_hip"
  type: "InnerProduct"
  bottom: "fc7_hip"
  top: "cls_score_hip"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_hip"
  type: "MIL"
  bottom: "cls_score_hip"
  top: "mil_cls_score_hip"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_hip"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_hip"
  bottom: "pvp_hip"
  bottom: "pvp_hip_wts"
  top: "loss_hip"
  loss_weight: 9.7
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_hip"
        top: "predict_hip"
        name: "predict_hip"
        type: "Sigmoid"
}
layer {
  name: "accuracy_hip"
  type: "MultiLabelAccuracy"
  bottom: "predict_hip"
  bottom: "pvp_hip"
  top: "accuracy_hip"
}
####hip-->600####################now we use MLP with one hidden layer(1024)
layer {
  name: "fc6_hip_to_600"
  type: "InnerProduct"
  bottom: "fc7_hip" # now we use the fc7 of pvp, we can try cls_score either
  top: "fc6_hip_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024 #4096
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_fc6_hip_to_600"
  type: "ReLU"
  bottom: "fc6_hip_to_600"
  top: "fc6_hip_to_600"
}
layer {
  name: "drop6_hip_to_600"
  type: "Dropout"
  bottom: "fc6_hip_to_600"
  top: "fc6_hip_to_600"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_hip_to_600"
  type: "InnerProduct"
  bottom: "fc6_hip_to_600"
  top: "cls_score_hip_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 600
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_hip_to_600"
  type: "MIL"
  bottom: "cls_score_hip_to_600"
  top: "mil_cls_score_hip_to_600"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_hip_to_600"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_hip_to_600"
  bottom: "label"
  bottom: "label_wts"
  top: "loss_hip_to_600"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_hip_to_600"
        top: "predict_hip_to_600"
        name: "predict_hip_to_600"
        type: "Sigmoid"
}
layer {
  name: "accuracy_hip_to_600"
  type: "MultiLabelAccuracy"
  bottom: "predict_hip_to_600"
  bottom: "label"
  top: "accuracy_hip_to_600"
}
#################
## hand#######################################################
layer {
  name: "feat_concat_hand"
  type: "Concat"
  bottom: "partroi7_pool5"
  bottom: "partroi10_pool5"
  bottom: "humanroi_pool5"
  bottom: "relroi1_pool5"
  bottom: "relroi2_pool5"
  bottom: "relroi3_pool5"
  bottom: "relroi4_pool5"
  bottom: "sceneroi_pool5"
  top: "hand_part_concat"
  concat_param {
    axis: 1
  }
}
layer {
  name: "fc6_hand"
  type: "InnerProduct"
  bottom: "hand_part_concat"
  top: "fc6_hand"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_hand"
  type: "ReLU"
  bottom: "fc6_hand"
  top: "fc6_hand"
}
layer {
  name: "drop6_hand"
  type: "Dropout"
  bottom: "fc6_hand"
  top: "fc6_hand"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_hand"
  type: "InnerProduct"
  bottom: "fc6_hand"
  top: "fc7_hand"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu7_hand"
  type: "ReLU"
  bottom: "fc7_hand"
  top: "fc7_hand"
}
layer {
  name: "drop7_hand"
  type: "Dropout"
  bottom: "fc7_hand"
  top: "fc7_hand"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "cls_score_hand"
  type: "InnerProduct"
  bottom: "fc7_hand"
  top: "cls_score_hand"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 23
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_hand"
  type: "MIL"
  bottom: "cls_score_hand"
  top: "mil_cls_score_hand"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_hand"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_hand"
  bottom: "pvp_hand2"
  bottom: "pvp_hand2_wts"
  top: "loss_hand"
  loss_weight: 4.2
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_hand"
        top: "predict_hand"
        name: "predict_hand"
        type: "Sigmoid"
}
layer {
  name: "accuracy_hand"
  type: "MultiLabelAccuracy"
  bottom: "predict_hand"
  bottom: "pvp_hand2"
  top: "accuracy_hand"
}
####hand-->600####################now we use MLP with one hidden layer(1024)
layer {
  name: "fc6_hand_to_600"
  type: "InnerProduct"
  bottom: "fc7_hand" # now we use the fc7 of pvp, we can try cls_score either
  top: "fc6_hand_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024 #4096
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_fc6_hand_to_600"
  type: "ReLU"
  bottom: "fc6_hand_to_600"
  top: "fc6_hand_to_600"
}
layer {
  name: "drop6_hand_to_600"
  type: "Dropout"
  bottom: "fc6_hand_to_600"
  top: "fc6_hand_to_600"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_hand_to_600"
  type: "InnerProduct"
  bottom: "fc6_hand_to_600"
  top: "cls_score_hand_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 600
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_hand_to_600"
  type: "MIL"
  bottom: "cls_score_hand_to_600"
  top: "mil_cls_score_hand_to_600"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_hand_to_600"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_hand_to_600"
  bottom: "label"
  bottom: "label_wts"
  top: "loss_hand_to_600"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_hand_to_600"
        top: "predict_hand_to_600"
        name: "predict_hand_to_600"
        type: "Sigmoid"
}
layer {
  name: "accuracy_hand_to_600"
  type: "MultiLabelAccuracy"
  bottom: "predict_hand_to_600"
  bottom: "label"
  top: "accuracy_hand_to_600"
}
#################
## shoulder#######################################################
layer {
  name: "feat_concat_shoulder"
  type: "Concat"
  bottom: "partroi8_pool5"
  bottom: "partroi9_pool5"
  bottom: "humanroi_pool5"
  bottom: "relroi1_pool5"
  bottom: "relroi2_pool5"
  bottom: "relroi3_pool5"
  bottom: "relroi4_pool5"
  bottom: "sceneroi_pool5"
  top: "shoulder_part_concat"
  concat_param {
    axis: 1
  }
}
layer {
  name: "fc6_shoulder"
  type: "InnerProduct"
  bottom: "shoulder_part_concat"
  top: "fc6_shoulder"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_shoulder"
  type: "ReLU"
  bottom: "fc6_shoulder"
  top: "fc6_shoulder"
}
layer {
  name: "drop6_shoulder"
  type: "Dropout"
  bottom: "fc6_shoulder"
  top: "fc6_shoulder"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_shoulder"
  type: "InnerProduct"
  bottom: "fc6_shoulder"
  top: "fc7_shoulder"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu7_shoulder"
  type: "ReLU"
  bottom: "fc7_shoulder"
  top: "fc7_shoulder"
}
layer {
  name: "drop7_shoulder"
  type: "Dropout"
  bottom: "fc7_shoulder"
  top: "fc7_shoulder"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "cls_score_shoulder"
  type: "InnerProduct"
  bottom: "fc7_shoulder"
  top: "cls_score_shoulder"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_shoulder"
  type: "MIL"
  bottom: "cls_score_shoulder"
  top: "mil_cls_score_shoulder"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_shoulder"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_shoulder"
  bottom: "pvp_shoulder2"
  bottom: "pvp_shoulder2_wts"
  top: "loss_shoulder"
  loss_weight: 19.9
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_shoulder"
        top: "predict_shoulder"
        name: "predict_shoulder"
        type: "Sigmoid"
}
layer {
  name: "accuracy_shoulder"
  type: "MultiLabelAccuracy"
  bottom: "predict_shoulder"
  bottom: "pvp_shoulder2"
  top: "accuracy_shoulder"
}
####shoulder-->600####################now we use MLP with one hidden layer(1024)
layer {
  name: "fc6_shoulder_to_600"
  type: "InnerProduct"
  bottom: "fc7_shoulder" # now we use the fc7 of pvp, we can try cls_score either
  top: "fc6_shoulder_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024 #4096
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_fc6_shoulder_to_600"
  type: "ReLU"
  bottom: "fc6_shoulder_to_600"
  top: "fc6_shoulder_to_600"
}
layer {
  name: "drop6_shoulder_to_600"
  type: "Dropout"
  bottom: "fc6_shoulder_to_600"
  top: "fc6_shoulder_to_600"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_shoulder_to_600"
  type: "InnerProduct"
  bottom: "fc6_shoulder_to_600"
  top: "cls_score_shoulder_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 600
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_shoulder_to_600"
  type: "MIL"
  bottom: "cls_score_shoulder_to_600"
  top: "mil_cls_score_shoulder_to_600"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_shoulder_to_600"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_shoulder_to_600"
  bottom: "label"
  bottom: "label_wts"
  top: "loss_shoulder_to_600"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_shoulder_to_600"
        top: "predict_shoulder_to_600"
        name: "predict_shoulder_to_600"
        type: "Sigmoid"
}
layer {
  name: "accuracy_shoulder_to_600"
  type: "MultiLabelAccuracy"
  bottom: "predict_shoulder_to_600"
  bottom: "label"
  top: "accuracy_shoulder_to_600"
}
#################
## head#######################################################
layer {
  name: "feat_concat_head"
  type: "Concat"
  bottom: "partroi6_pool5"
  bottom: "humanroi_pool5"
  bottom: "relroi1_pool5"
  bottom: "relroi2_pool5"
  bottom: "relroi3_pool5"
  bottom: "relroi4_pool5"
  bottom: "sceneroi_pool5"
  top: "head_part_concat"
  concat_param {
    axis: 1
  }
}
layer {
  name: "fc6_head"
  type: "InnerProduct"
  bottom: "head_part_concat"
  top: "fc6_head"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_head"
  type: "ReLU"
  bottom: "fc6_head"
  top: "fc6_head"
}
layer {
  name: "drop6_head"
  type: "Dropout"
  bottom: "fc6_head"
  top: "fc6_head"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_head"
  type: "InnerProduct"
  bottom: "fc6_head"
  top: "fc7_head"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu7_head"
  type: "ReLU"
  bottom: "fc7_head"
  top: "fc7_head"
}
layer {
  name: "drop7_head"
  type: "Dropout"
  bottom: "fc7_head"
  top: "fc7_head"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "cls_score_head"
  type: "InnerProduct"
  bottom: "fc7_head"
  top: "cls_score_head"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 12
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_head"
  type: "MIL"
  bottom: "cls_score_head"
  top: "mil_cls_score_head"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_head"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_head"
  bottom: "pvp_head"
  bottom: "pvp_head_wts"
  top: "loss_head"
  loss_weight: 13.3
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_head"
        top: "predict_head"
        name: "predict_head"
        type: "Sigmoid"
}
layer {
  name: "accuracy_head"
  type: "MultiLabelAccuracy"
  bottom: "predict_head"
  bottom: "pvp_head"
  top: "accuracy_head"
}
####head-->600####################now we use MLP with one hidden layer(1024)
layer {
  name: "fc6_head_to_600"
  type: "InnerProduct"
  bottom: "fc7_head" # now we use the fc7 of pvp, we can try cls_score either
  top: "fc6_head_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024 #4096
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_fc6_head_to_600"
  type: "ReLU"
  bottom: "fc6_head_to_600"
  top: "fc6_head_to_600"
}
layer {
  name: "drop6_head_to_600"
  type: "Dropout"
  bottom: "fc6_head_to_600"
  top: "fc6_head_to_600"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_head_to_600"
  type: "InnerProduct"
  bottom: "fc6_head_to_600"
  top: "cls_score_head_to_600"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 600
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_head_to_600"
  type: "MIL"
  bottom: "cls_score_head_to_600"
  top: "mil_cls_score_head_to_600"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_head_to_600"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_head_to_600"
  bottom: "label"
  bottom: "label_wts"
  top: "loss_head_to_600"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_head_to_600"
        top: "predict_head_to_600"
        name: "predict_head_to_600"
        type: "Sigmoid"
}
layer {
  name: "accuracy_head_to_600"
  type: "MultiLabelAccuracy"
  bottom: "predict_head_to_600"
  bottom: "label"
  top: "accuracy_head_to_600"
}
#################
################################10v, to enhance the occurance of parts###
layer {
  name: "partpairs_10v"
  type: "Concat"
  bottom: "fc7_feet"#"cls_score_feet"
  bottom: "fc7_knee"#"cls_score_knee"
  bottom: "fc7_hip"#"cls_score_hip"
  bottom: "fc7_hand"#"cls_score_hand"
  bottom: "fc7_shoulder"#"cls_score_shoulder"
  bottom: "fc7_head" #cls_score_head
  top: "partpairs_10v"
  concat_param {
    axis: 1
  }
}

layer {
  name: "fc6_part"
  type: "InnerProduct"
  bottom: "partpairs_10v"
  top: "fc6_part"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024 #4096
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu6_part"
  type: "ReLU"
  bottom: "fc6_part"
  top: "fc6_part"
}
layer {
  name: "drop6_part"
  type: "Dropout"
  bottom: "fc6_part"
  top: "fc6_part"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_part"
  type: "InnerProduct"
  bottom: "fc6_part"
  top: "fc7_part"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024 #4096
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
    }
  }
}
layer {
  name: "relu7_part"
  type: "ReLU"
  bottom: "fc7_part"
  top: "fc7_part"
}
layer {
  name: "drop7_part"
  type: "Dropout"
  bottom: "fc7_part"
  top: "fc7_part"
  dropout_param {
    dropout_ratio: 0.5
  }
}


layer {
  name: "cls_score_part"
  type: "InnerProduct"
  bottom: "fc7_part"
  top: "cls_score_part"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "mil_cls_score_part"
  type: "MIL"
  bottom: "cls_score_part"
  top: "mil_cls_score_part"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_part_stream"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_part"
  bottom: "hp_list"
  bottom: "hp_list_wts" # now wts can be set by the statics of pvp wts
  top: "loss_part"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
    bottom: "mil_cls_score_part"
    top: "predict_part"
    name: "predict_part"
    type: "Sigmoid"
}
layer {
    name: "accuracy_part"
    type: "MultiLabelAccuracy"
    bottom: "predict_part"
    bottom: "hp_list"
    top: "accuracy_part"
}
#####################################117v classifier########################
# by the way, in the construction of 6x512, the 4 relroi were concated either
# 512x6
layer {
  name: "part_117v"
  type: "Concat"
  bottom: "fc7_feet"#"cls_score_feet"
  bottom: "fc7_knee"#"cls_score_knee"
  bottom: "fc7_hip"#"cls_score_hip"
  bottom: "fc7_hand"#"cls_score_hand"
  bottom: "fc7_shoulder"#"cls_score_shoulder"
  bottom: "fc7_head" #cls_score_head
  top: "117v_concat"
  concat_param {
    axis: 1 # channels
  }
}
layer {
  name: "cls_score_117v"
  type: "InnerProduct"
  bottom: "117v_concat"
  top: "cls_score_117v"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 117
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_117v"
  type: "MIL"
  bottom: "cls_score_117v"
  top: "mil_cls_score_117v"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_117v"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_117v"
  bottom: "verb_list"
  bottom: "verb_list_wts"
  top: "loss_117v"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_117v"
        top: "predict_117v"
        name: "predict_117v"
        type: "Sigmoid"
}
layer {
  name: "accuracy_117v"
  type: "MultiLabelAccuracy"
  bottom: "predict_117v"
  bottom: "verb_list"
  top: "accuracy_117v"
}
layer {
  name: "part_pvp_all"
  type: "Concat"
  bottom: "fc7_feet"#"cls_score_feet"
  bottom: "fc7_knee"#"cls_score_knee"
  bottom: "fc7_hip"#"cls_score_hip"
  bottom: "fc7_hand"#"cls_score_hand"
  bottom: "fc7_shoulder"#"cls_score_shoulder"
  bottom: "fc7_head" #cls_score_head
  top: "pvp_all_concat"
  concat_param {
    axis: 1 # channels
  }
}
layer {
  name: "cls_score_pvp_all"
  type: "InnerProduct"
  bottom: "pvp_all_concat"
  top: "cls_score_pvp_all"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 600
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_pvp_all"
  type: "MIL"
  bottom: "cls_score_pvp_all"
  top: "mil_cls_score_pvp_all"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_pvp_all"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_pvp_all"
  bottom: "label"
  bottom: "label_wts"
  top: "loss_pvp_all"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_pvp_all"
        top: "predict_pvp_all"
        name: "predict_pvp_all"
        type: "Sigmoid"
}
layer {
  name: "accuracy_pvp_all"
  type: "MultiLabelAccuracy"
  bottom: "predict_pvp_all"
  bottom: "label"
  top: "accuracy_pvp_all"
}
############################################# second stream predictions #################################################
layer {
  name: "feat_concat2"
  type: "Concat"
  bottom: "relroi1_pool5"
  bottom: "relroi2_pool5"
  bottom: "relroi3_pool5"
  bottom: "relroi4_pool5"
  bottom: "humanroi_pool5"
  bottom: "sceneroi_pool5"
  top: "dim_red_feats2"
  concat_param {
    axis: 1 # channels
  }
}


# normal fc6 and fc7
layer {
  name: "fc6_stream2"
  type: "InnerProduct"

  bottom: "dim_red_feats2"
  top: "fc6_stream2"
  
  param {
    name: "fc6_w_stream2"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    name: "fc6_b_stream2"
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6_stream2"
  type: "ReLU"
  bottom: "fc6_stream2"
  top: "fc6_stream2"
}
layer {
  name: "drop6_stream2"
  type: "Dropout"
  bottom: "fc6_stream2"
  top: "fc6_stream2"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_stream2"
  type: "InnerProduct"
  bottom: "fc6_stream2"
  top: "fc7_stream2"
  param {
    name: "fc7_w_stream2"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    name: "fc7_b_stream2"
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7_stream2"
  type: "ReLU"
  bottom: "fc7_stream2"
  top: "fc7_stream2"
}
layer {
  name: "drop7_stream2"
  type: "Dropout"
  bottom: "fc7_stream2"
  top: "fc7_stream2"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_stream2"
  type: "InnerProduct"
  bottom: "fc7_stream2"
  top: "cls_score_stream2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 600
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "mil_cls_score_stream2"
  type: "MIL"
  bottom: "cls_score_stream2"
  top: "mil_cls_score_stream2"
  mil_param {
    context_per_roi: 3
  }
}
layer {
  name: "loss_stream2"
  type: "SigmoidCrossEntropyLoss"
  bottom: "mil_cls_score_stream2"
  bottom: "label"
  bottom: "label_wts"
  top: "loss_new"
  loss_param: {
     ignore_label: -1
     weight_positive: 10
  }
  include {
    phase: TRAIN
  }
}
layer {
        bottom: "mil_cls_score_stream2"
        top: "predict_stream2"
        name: "predict_stream2"
        type: "Sigmoid"
}
layer {
  name: "accuracy_stream2"
  type: "MultiLabelAccuracy"
  bottom: "predict_stream2"
  bottom: "label"
  top: "accuracy_stream2"
}
